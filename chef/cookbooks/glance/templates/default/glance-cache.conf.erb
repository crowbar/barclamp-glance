[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = <%= node[:glance][:verbose] ? 'True' : 'False' %>

# Show debugging output in logs (sets DEBUG log level output)
debug = <%= node[:glance][:debug] ? 'True' : 'False' %>

# Log to this file. Make sure you do not set the same log file for both the API
# and registry servers!
#
# If `log_file` is omitted and `use_syslog` is false, then log messages are
# sent to stdout as a fallback.
log_file = <%= node[:glance][:cache][:log_file] %>

# Send logs to syslog (/dev/log) instead of to file specified by `log_file`
use_syslog = <%= node[:glance][:use_syslog] ? 'True' : 'False' %>

# Directory that the Image Cache writes data to
image_cache_dir = <%= node[:glance][:image_cache_datadir] %>

# Number of seconds after which we should consider an incomplete image to be
# stalled and eligible for reaping
image_cache_stall_time = <%= node[:glance][:image_cache_stall_timeout] %>

# Max cache size in bytes
image_cache_max_size = <%= node[:glance][:image_cache_max_size] %>

# Address to find the registry server
registry_host = <%= @registry_bind_host %>

# Port the registry server is listening on
registry_port = <%= @registry_bind_port %>

# Auth settings if using Keystone
# auth_url = http://127.0.0.1:5000/v2.0/
# admin_tenant_name = %SERVICE_TENANT_NAME%
# admin_user = %SERVICE_USER%
# admin_password = %SERVICE_PASSWORD%

# List of which store classes and store class locations are
# currently known to glance at startup.
# known_stores = glance.store.filesystem.Store,
#                glance.store.http.Store,
#                glance.store.rbd.Store,
#                glance.store.s3.Store,
#                glance.store.swift.Store,
#                glance.store.sheepdog.Store,
#                glance.store.cinder.Store,
#                glance.store.vmware_datastore.Store,
known_stores = glance.store.filesystem.Store,glance.store.http.Store,glance.store.rbd.Store,glance.store.swift.Store,glance.store.cinder.Store,glance.store.vmware_datastore.Store

# ============ Filesystem Store Options ========================

# Directory that the Filesystem backend store
# writes image data to
filesystem_store_datadir = <%= node[:glance][:filesystem_store_datadir] %>

# ============ Swift Store Options =============================

# Version of the authentication service to use
# Valid versions are '2' for keystone and '1' for swauth and rackspace
swift_store_auth_version = 2

# Address where the Swift authentication service lives
# Valid schemes are 'http://' and 'https://'
# If no scheme specified,  default to 'https://'
# For swauth, use something like '127.0.0.1:8080/v1.0/'
swift_store_auth_address = <%= @keystone_settings['internal_auth_url'] %>

# User to authenticate against the Swift authentication service
# If you use Swift authentication service, set it to 'account':'user'
# where 'account' is a Swift storage account and 'user'
# is a user in that account
swift_store_user = <%= @keystone_settings['service_tenant'] %>:<%= @keystone_settings['service_user'] %>

# Auth key for the user authenticating against the
# Swift authentication service
swift_store_key = <%= @keystone_settings['service_password'] %>

# Container within the account that the account should use
# for storing images in Swift
swift_store_container = <%= node[:glance][:swift][:store_container] %>

# Do we create the container if it does not exist?
swift_store_create_container_on_put = <%= node[:glance][:swift][:store_create_container_on_put] %>

# What size, in MB, should Glance start chunking image files
# and do a large object manifest in Swift? By default, this is
# the maximum object size in Swift, which is 5GB
swift_store_large_object_size = 5120

# When doing a large object manifest, what size, in MB, should
# Glance write chunks to Swift? This amount of data is written
# to a temporary disk buffer during the process of chunking
# the image file, and the default is 200MB
swift_store_large_object_chunk_size = 200

# Whether to use ServiceNET to communicate with the Swift storage servers.
# (If you aren't RACKSPACE, leave this False!)
#
# To use ServiceNET for authentication, prefix hostname of
# `swift_store_auth_address` with 'snet-'.
# Ex. https://example.com/v1.0/ -> https://snet-example.com/v1.0/
swift_enable_snet = False

# ============ S3 Store Options =============================

# Address where the S3 authentication service lives
# Valid schemes are 'http://' and 'https://'
# If no scheme specified,  default to 'http://'
s3_store_host = 127.0.0.1:8080/v1.0/

# User to authenticate against the S3 authentication service
s3_store_access_key = <20-char AWS access key>

# Auth key for the user authenticating against the
# S3 authentication service
s3_store_secret_key = <40-char AWS secret key>

# Container within the account that the account should use
# for storing images in S3. Note that S3 has a flat namespace,
# so you need a unique bucket name for your glance images. An
# easy way to do this is append your AWS access key to "glance".
# S3 buckets in AWS *must* be lowercased, so remember to lowercase
# your AWS access key if you use it in your bucket name below!
s3_store_bucket = <lowercased 20-char aws access key>glance

# Do we create the bucket if it does not exist?
s3_store_create_bucket_on_put = False

# When sending images to S3, the data will first be written to a
# temporary buffer on disk. By default the platform's temporary directory
# will be used. If required, an alternative directory can be specified here.
# s3_store_object_buffer_dir = /path/to/dir

# ============ Cinder Store Options ===========================

# Info to match when looking for cinder in the service catalog
# Format is : separated values of the form:
# <service_type>:<service_name>:<endpoint_type> (string value)
cinder_catalog_info = volume:cinder:internalURL

# Override service catalog lookup with template for cinder endpoint
# e.g. http://localhost:8776/v1/%(project_id)s (string value)
#cinder_endpoint_template = <None>

# Region name of this node (string value)
#os_region_name = <None>

# Location of ca certicates file to use for cinder client requests
# (string value)
#cinder_ca_certificates_file = <None>

# Number of cinderclient retries on failed http calls (integer value)
#cinder_http_retries = 3

# Allow to perform insecure SSL requests to cinder (boolean value)
cinder_api_insecure = <%= @cinder_api_insecure ? 'True' : 'False' %>

# ============ VMware Datastore Store Options =====================

# ESX/ESXi or vCenter Server target system.
# The server value can be an IP address or a DNS name
# e.g. 127.0.0.1, 127.0.0.1:443, www.vmware-infra.com
vmware_server_host = <%= node[:glance][:vsphere][:host] %>

# Server username (string value)
vmware_server_username = <%= node[:glance][:vsphere][:user] %>

# Server password (string value)
vmware_server_password = <%= node[:glance][:vsphere][:password] %>

# Inventory path to a datacenter (string value)
# Value optional when vmware_server_ip is an ESX/ESXi host: if specified
# should be `ha-datacenter`.
vmware_datacenter_path = <%= node[:glance][:vsphere][:datacenter_path] %>

# Datastore associated with the datacenter (string value)
vmware_datastore_name = <%= node[:glance][:vsphere][:datastore] %>

# The number of times we retry on failures
# e.g., socket error, etc (integer value)
#vmware_api_retry_count = 10

# The interval used for polling remote tasks
# invoked on VMware ESX/VC server in seconds (integer value)
#vmware_task_poll_interval = 5

# Absolute path of the folder containing the images in the datastore
# (string value)
vmware_store_image_dir = <%= node[:glance][:vsphere][:store_image_dir] %>

# Allow to perform insecure SSL requests to the target system (boolean value)
#vmware_api_insecure = False

# ================= Security Options ==========================

# AES key for encrypting store 'location' metadata, including
# -- if used -- Swift or S3 credentials
# Should be set to a random string of length 16, 24 or 32 bytes
# metadata_encryption_key = <16, 24 or 32 char registry metadata key>
