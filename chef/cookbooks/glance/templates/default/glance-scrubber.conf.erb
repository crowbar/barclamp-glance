[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = <%= node[:glance][:verbose] ? "True" : "False" %>

# Show debugging output in logs (sets DEBUG log level output)
debug = <%= node[:glance][:debug] ? "True" : "False" %>

# Log to this file. Make sure you do not set the same log file for both the API
# and registry servers!
#
# If `log_file` is omitted and `use_syslog` is false, then log messages are
# sent to stdout as a fallback.
log_file = <%= node[:glance][:scrubber][:log_file] %>

# Send logs to syslog (/dev/log) instead of to file specified by `log_file`
use_syslog = <%= node[:glance][:use_syslog] ? "True" : "False" %>

# Should we run our own loop or rely on cron/scheduler to run us
daemon = False

# Loop time between checking for new items to schedule for delete
wakeup_time = 300

# Directory that the scrubber will use to remind itself of what to delete
# Make sure this is also set in glance-api.conf
scrubber_datadir = /var/lib/glance/scrubber

# Only one server in your deployment should be designated the cleanup host
cleanup_scrubber = False

# pending_delete items older than this time are candidates for cleanup
cleanup_scrubber_time = 86400

# Address to find the registry server for cleanups
registry_host = <%= @registry_bind_host %>

# Port the registry server is listening on
registry_port = <%= @registry_bind_port %>

<% # Missing in upstream template -%>
registry_client_insecure = <%= @keystone_settings["insecure"] %>

# Auth settings if using Keystone
# auth_url = http://127.0.0.1:5000/v2.0/
auth_url = <%= @keystone_settings['public_auth_url'] %>
# admin_tenant_name = %SERVICE_TENANT_NAME%
admin_tenant_name =  <%= @keystone_settings['service_tenant'] %>
# admin_user = %SERVICE_USER%
admin_user = <%= @keystone_settings['service_user'] %>
# admin_password = %SERVICE_PASSWORD%
admin_password = <%= @keystone_settings['service_password'] %>

# Directory to use for lock files. Default to a temp directory
# (string value). This setting needs to be the same for both
# glance-scrubber and glance-api.
lock_path = /var/run/glance

# API to use for accessing data. Default value points to sqlalchemy
# package, it is also possible to use: glance.db.registry.api
#data_api = glance.db.sqlalchemy.api


# ================= Security Options ==========================

# AES key for encrypting store 'location' metadata, including
# -- if used -- Swift or S3 credentials
# Should be set to a random string of length 16, 24 or 32 bytes
#metadata_encryption_key = <16, 24 or 32 char registry metadata key>

# ================= Database Options ===============+==========

[database]

# The SQLAlchemy connection string used to connect to the
# database (string value)
connection = <%= node[:glance][:sql_connection] %>

# The SQLAlchemy connection string used to connect to the
# slave database (string value)
#slave_connection=

# timeout before idle sql connections are reaped (integer
# value)
idle_timeout = <%= node[:glance][:sql_idle_timeout] %>

# Minimum number of SQL connections to keep open in a pool
# (integer value)
#min_pool_size=1

# Maximum number of SQL connections to keep open in a pool
# (integer value)
#max_pool_size=<None>

# maximum db connection retries during startup. (setting -1
# implies an infinite retry count) (integer value)
#max_retries=10

# interval between retries of opening a sql connection
# (integer value)
#retry_interval=10

# If set, use this value for max_overflow with sqlalchemy
# (integer value)
#max_overflow=<None>

# Verbosity of SQL debugging information. 0=None,
# 100=Everything (integer value)
#connection_debug=0

# Add python stack traces to SQL as comment strings (boolean
# value)
#connection_trace=false

# If set, use this value for pool_timeout with sqlalchemy
# (integer value)
#pool_timeout=<None>
